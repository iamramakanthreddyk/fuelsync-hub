# FuelSync Hub - Implementation Plan

## Project Overview
FuelSync Hub is a multi-tenant SaaS platform for fuel station management. The system allows station owners to manage their fuel stations, pumps, nozzles, and sales records. It supports different user roles, price management, sales recording, and financial reconciliation.

## Architecture
- **Frontend**: React/Next.js
- **Backend**: Node.js with Express
- **Database**: PostgreSQL with tenant isolation via schemas
- **Authentication**: JWT-based with role-based access control
- **Deployment**: Azure (planned)

## Implementation Phases

### Phase 1: Core Infrastructure (Week 1-2)
- [x] Database schema design
- [x] Multi-tenant architecture setup
- [x] Authentication and authorization system
- [x] Backend API foundation
- [x] Frontend project structure

### Phase 2: Station Management (Week 3)
- [ ] Station CRUD operations
- [ ] Pump management
- [ ] Nozzle configuration
- [ ] Fuel price management
- [ ] User role assignment to stations

### Phase 3: Sales Recording System (Week 4)
- [ ] Sales entry interface
- [ ] Previous reading retrieval
- [ ] Automatic calculations
- [ ] Credit tracking system
- [ ] Reconciliation workflow

### Phase 4: Reporting and Analytics (Week 5)
- [ ] Daily/weekly/monthly sales reports
- [ ] Station performance metrics
- [ ] Fuel consumption analytics
- [ ] Credit settlement tracking
- [ ] CSV/Excel export functionality

### Phase 5: Admin Features & Refinement (Week 6)
- [ ] Tenant management for admin
- [ ] Plan-based feature restrictions
- [ ] Billing integration
- [ ] UI/UX refinements
- [ ] Performance optimizations

## Tenant Schema Strategy
We're using a schema-per-tenant approach in PostgreSQL, which provides:
- Strong data isolation between tenants
- Simplified backup/restore per tenant
- Clean permission management
- Better scalability for large tenants

## Security Measures
- JWT authentication with short expiration
- Password hashing with bcrypt
- Role-based access control
- Session tracking and audit logs
- Input validation and sanitization
- PostgreSQL schema isolation

## Data Flow for Key Operations

### Sales Recording Process
1. Employee selects station and nozzle
2. System retrieves last cumulative reading
3. Employee enters new cumulative reading
4. System calculates volume = new reading - previous reading
5. System retrieves current fuel price
6. System calculates amount = volume * price
7. Employee enters payment details (cash, credit, etc.)
8. System validates and records the sale
9. If credit is given, creditor balance is updated

### End of Day Reconciliation
1. Manager selects station and date
2. System retrieves all sales for that day
3. System calculates totals (cash, credit, etc.)
4. Manager enters card and UPI totals
5. System verifies total sales = cash + credit + card + UPI
6. Manager finalizes reconciliation
7. System locks the day's records

## Monitoring and Maintenance
- Daily database backups
- Error logging and monitoring
- Regular security audits
- Performance monitoring
- Database index optimization

## Future Enhancements (Post-MVP)
- Mobile application for on-the-go sales recording
- Inventory management system
- Integration with accounting software
- Loyalty program for customers
- Automated price updates based on market rates

## 📋 MASTER REVIEWER PROMPT — FuelSync Hub

> **You are a senior TypeScript/PostgreSQL engineer joining an existing project called “FuelSync Hub”.
> Your primary job is to act as a code **reviewer and auditor** first, then as **implementer**.
> Follow the instructions below strictly.**

---

### 1. **Project Context (read-only)**

* **Backend**: Express + TypeScript
* **Database**: single PostgreSQL DB (schema already provided).
* **Auth**:

  * Tenant users (`owner`, `manager`, `employee`) use **sessions** via `express-session`.
* **Core Features in Scope**

  1. Manual Sales Entry (no OCR)
  2. Creditors (credit sales & payments)
  3. Tender / Shift-Close Entry
  4. Day Reconciliation
  5. Fuel Pricing (historical)
  6. User ↔ Station assignment (multi-tenant)

---

### 2. **Schema (must stay intact)**

*(Already in the repo under `db/000_schema.sql`; do not change columns without approval.)*
Key tables: `tenants`, `users`, `stations`, `pumps`, `nozzles`, `fuel_prices`, `sales`, `creditors`, `tender_entries`, `day_reconciliations`, `admin_activity_logs`, `user_stations`, etc.

---

### 3. **Your Workflow**

1. **Codebase Scan & Mapping**

   * List every file relevant to the six features above.
   * Map each requirement to its current implementation (or note “missing / stub / obsolete”).
   * Produce a concise **gap analysis table**: *requirement → file(s) → status*.

2. **Review Report (no code changes yet)**

   * Highlight:

     * Duplicated logic
     * Security issues (e.g., JWT header parsing, SQL injection risk)
     * Typing gaps (`any`, missing `express-session` augmentation, etc.)
     * Broken or incomplete tests
   * Ask any clarifying questions **before** proposing fixes if something is ambiguous.

3. **Refactor & Fix Plan**

   * Propose concrete, minimal changes to satisfy all requirements and best practices
   * Include file paths and brief description of each change
   * Get explicit confirmation (or answers) before coding if needed.

4. **Implementation**

   * Apply changes using diff-style snippets (` ```ts ... ``` `).
   * Only touch files listed in the plan.
   * Keep commit history logical (reviewer can squash later).

5. **Validation**

   * Provide manual testing steps or Supertest/Jest snippets for each feature.
   * Ensure `npm test` and `seed.ts` run green.

6. **Deliverables**

   * Review report (step 2)
   * Refactor plan (step 3)
   * Code diffs (step 4)
   * Validation instructions (step 5)

**Always output in this order**: *Summary → Mapping Table → Gaps → Plan → (later) Diffs*.

---

### 4. **Guard-rails & Best Practices**

* **Do not invent new tables or columns** without asking.
* Use **parameterized SQL** (`$1,$2`) only.
* No `any` or `unknown` unless fully justified.
* Keep controllers thin, push business logic to `services/`.
* Transactions for multi-step DB writes.
* ESLint/Prettier must pass.
* When updating types, use module augmentation files under `src/types`.

---

### 5. **Output Format**

````md
### Summary
- one-line progress recap (max 3 bullet)

### Requirement ↔ Code Mapping
| Req # | Requirement | File(s) Found | Status |
|-------|-------------|---------------|--------|
| 1 | Manual Sales Entry | src/controllers/sales.controller.ts | ✅ implemented |
| 2 | Creditors | … | 🔴 missing |
...

### Gap Analysis
- R1: duplicate auth header parsing in X & Y
- R2: no tests for tender entry
...

### Proposed Fix Plan
1. Refactor auth middleware …
2. Create `creditors.service.ts` implementing …
3. …

### (After approval) Code Diffs
```diff
// src/middlewares/auth.ts
- const token = req.headers.authorization;
+ const auth = req.headers['authorization'];
````

```

---

### 6. **If Anything Is Unclear**

> **Stop and ask a question before coding.** Never assume data or logic.

---

**End of prompt**
```